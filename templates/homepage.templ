package templates;

import (
    "net/http"
    "web/templates/components"
    )

templ HomePage() {
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>StudyOnly</title>
    <link rel="stylesheet" href="/assets/homepage.css">
    <link rel="stylesheet" href="/assets/navbar.css">

    <script>
        function delay(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }

        async function startSliding() {
            let textsToSlide = [];
            if (localStorage.getItem('animation-finished') != "true"){
                textsToSlide = document.getElementsByClassName('sliding-text');
            }

            for (let i = 0; i < textsToSlide.length; i++){
                textsToSlide[i].style.animationName = "slide";
                textsToSlide[i].style.visibility = "visible";
                textsToSlide[i].style.display = "block";
                await delay(4000);
                textsToSlide[i].style.visibility = "hidden";
                textsToSlide[i].style.display = "none";
                await delay(250);
            }

            const menu = document.getElementById('main-menu');
            menu.style.animationName = "show";
            menu.style.display = "flex";
            menu.style.visibility = "visible";

            localStorage.setItem("animation-finished", "true");
        }
    </script>
</head>
<body onload="startSliding()">

<div id="chat-messages"></div>
    <form id="chat-form">
        <input type="text" id="message-input" placeholder="Wpisz wiadomość...">
        <button type="submit">Wyślij</button>
    </form>

    <script>
        const chatMessages = document.getElementById('chat-messages');
        const chatForm = document.getElementById('chat-form');
        const messageInput = document.getElementById('message-input');

        let websocket;

        // Funkcja obsługująca połączenie WebSocket
        function setupWebSocket() {
            const userId = 'testuser3';  // Zmień na odpowiednie id_uzytkownika
            const websocketUrl = `ws://localhost:2137/ws/${userId}`;  // Zmień URL na odpowiedni

            websocket = new WebSocket(websocketUrl);

            // Obsługa zdarzenia po otwarciu połączenia WebSocket
            websocket.onopen = function () {
                console.log('Połączono z serwerem WebSocket');
            };

            // Obsługa zdarzenia otrzymania wiadomości
            websocket.onmessage = function (event) {
                console.log('Otrzymano wiadomość:', event.data);
                displayMessage(message.author, message.message);
            };

            // Obsługa zdarzenia zamknięcia połączenia WebSocket
            websocket.onclose = function () {
                console.log('Połączenie zostało zamknięte');
            };

            // Obsługa błędów WebSocket
            websocket.onerror = function (error) {
                console.error('Błąd WebSocket:', error);
            };
        }

        // Funkcja do wysyłania wiadomości przez WebSocket
        function sendMessage(event) {
            event.preventDefault();

            const messageContent = messageInput.value.trim();
            if (messageContent === '') return;

            const message = {
                user: 'testuser3',  // Zmień na odpowiednie id_uzytkownika
                event: 'chat',
                data: {
                    room: 'c18abd89-c55d-4642-a1fc-1af701e8411b',
                    content: messageContent
                }
            };

            console.log('Wysyłanie wiadomości:', JSON.stringify(message))
            websocket.send(JSON.stringify(message));
            messageInput.value = '';
        }

        // Funkcja do wyświetlania wiadomości na stronie
        function displayMessage(author, message) {
            const messageElement = document.createElement('div');
            messageElement.innerText = `${author}: ${message}`;
            chatMessages.appendChild(messageElement);
        }

        // Inicjalizacja po załadowaniu strony
        window.onload = function () {
            setupWebSocket();

            // Obsługa wysyłania formularza
            chatForm.addEventListener('submit', sendMessage);
        };
    </script>

    @components.Navbar()
    <div class="container">
        <h1 class="sliding-text">The new way of learning is here.</h1>
        <h1 class="sliding-text">Try StudyOnly!</h1>
        <h1 class="sliding-text">
            &#127891 Work with ambitious people around the world.<br>
            &#128214 Learn your subjects, exchange tips and information, meet new friends.<br>
            &#127942 And earn some points for helping!
        </h1>
        <h1 class="sliding-text">Register and create a room. See how simple it is!</h1>
        <div id="main-menu">
            <a href="http://localhost:2137/friends" class="navigation-option">Checkout your friends.</a><br>
            <a href="http://localhost:2137/timetable" class="navigation-option">Find study buddy here.</a><br>
            <a href="http://localhost:2137/chats" class="navigation-option">Or chat with them...</a><br>
        </div>
    </div>
</body>
</html>
}

func HandleHomePage(w http.ResponseWriter, r *http.Request) { 
	HomePage().Render(r.Context(), w)
}
