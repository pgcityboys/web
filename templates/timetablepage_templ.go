// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.707
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"net/http"
	"web/templates/components"
)

func TimeTablePage() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html lang=\"en\"><head><link href=\"https://cdn.rawgit.com/nizarmah/calendar-javascript-lib/master/calendarorganizer.min.css\" rel=\"stylesheet\"><link rel=\"stylesheet\" href=\"/assets/navbar.css\"><link rel=\"stylesheet\" href=\"/assets/timetable.css\"><style>\r\n        .popup {\r\n            display: none;\r\n            position: fixed;\r\n            top: 50%;\r\n            left: 50%;\r\n            transform: translate(-50%, -50%);\r\n            background-color: white;\r\n            padding: 20px;\r\n            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\r\n            z-index: 1000;\r\n        }\r\n    </style></head><body>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = components.Navbar().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div id=\"content\"><div id=\"calendarContainer\"></div><div id=\"organizerContainer\"></div></div><div class=\"popup\" id=\"popup\"><h2>Formularz do uzupe≈Çnienia</h2><form id=\"eventForm\"><label for=\"startTime\">StartTime:</label> <input type=\"text\" id=\"startTime\" name=\"startTime\"><br><label for=\"endTime\">EndTime:</label> <input type=\"text\" id=\"endTime\" name=\"endTime\"><br><label for=\"category\">Category:</label> <input type=\"text\" id=\"category\" name=\"category\"><br><label for=\"link\">Link:</label> <input type=\"text\" id=\"link\" name=\"link\"><br><label for=\"day\">Day:</label> <input type=\"number\" id=\"day\" name=\"day\" min=\"1\" max=\"31\"><br><label for=\"month\">Month:</label> <input type=\"number\" id=\"month\" name=\"month\" min=\"1\" max=\"12\"><br><label for=\"year\">Year:</label> <input type=\"number\" id=\"year\" name=\"year\"><br><input type=\"submit\" value=\"Submit\"> <button type=\"button\" onclick=\"closePopup()\">Close</button></form></div><script src=\"https://cdn.rawgit.com/nizarmah/calendar-javascript-lib/master/calendarorganizer.min.js\"></script><script>\r\n        var meeting = []\r\n\r\n        let fetchMeetings = () => {\r\n            const apiUrl = 'http://localhost:2137/api/meetings/matematyka';\r\n            fetch(apiUrl).then(response => {\r\n            return response.json();\r\n            })\r\n            .then(data => {\r\n            meetings = data;\r\n            console.log(meetings + \"meetings\");\r\n            }).catch(error => {\r\n            console.error('There was a problem with the fetch operation:', error);\r\n            });\r\n        }\r\n\r\n        fetchMeetings();\r\n\r\n        var calendar = new Calendar(\"calendarContainer\", \"medium\",\r\n                            [ \"Monday\", 3 ],\r\n                            [ \"#9828b5\", \"#802398\", \"#ffffff\", \"#521A57\" ],\r\n                            {\r\n                                days: [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\",  \"Saturday\" ],\r\n                                months: [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ],\r\n                                indicator: true,\r\n                                placeholder: \"<button onclick=\"openPopup()\">Custom Placeholder</button>\"\r\n                            });\r\n\r\n        //todo fetch events from backend\r\n\r\n        var data = {\r\n                    2024: {\r\n                        6: {\r\n                            20: [\r\n                                {\r\n                                    startTime: \"00:00\",\r\n                                    endTime: \"24:00\",\r\n                                    text: \"Meeting title\",\r\n                                    link: \"https://github.com/nizarmah\" \r\n                                }\r\n                            ]\r\n                        }\r\n                    }\r\n                };\r\n\r\n        var organizer = new Organizer(\"organizerContainer\", calendar, data);\r\n\r\n         function openPopup() {\r\n        document.getElementById(\"popup\").style.display = \"block\";\r\n        document.getElementById(\"overlay\").style.display = \"block\";\r\n    }\r\n\r\n    function closePopup() {\r\n        document.getElementById(\"popup\").style.display = \"none\";\r\n        document.getElementById(\"overlay\").style.display = \"none\";\r\n        document.getElementById(\"eventForm\").reset(); // Optional: Reset form fields when closing\r\n    }\r\n\r\n    document.getElementById(\"eventForm\").addEventListener(\"submit\", function(event) {\r\n        event.preventDefault();\r\n        var startTime = document.getElementById(\"startTime\").value;\r\n        var endTime = document.getElementById(\"endTime\").value;\r\n        var category = document.getElementById(\"category\").value;\r\n        var link = document.getElementById(\"link\").value;\r\n        var day = document.getElementById(\"day\").value;\r\n        var month = document.getElementById(\"month\").value;\r\n        var year = document.getElementById(\"year\").value;\r\n\r\n        console.log(\"StartTime:\", startTime);\r\n        console.log(\"EndTime:\", endTime);\r\n        console.log(\"Category:\", category);\r\n        console.log(\"Link:\", link);\r\n        console.log(\"Day:\", day);\r\n        console.log(\"Month:\", month);\r\n        console.log(\"Year:\", year);\r\n\r\n        closePopup();\r\n    });\r\n    </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func HandleTimeTablePage(w http.ResponseWriter, r *http.Request) {
	TimeTablePage().Render(r.Context(), w)
}
