// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.707
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"net/http"
	"web/templates/components"
)

func ChatPage() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>StudyOnly</title><link rel=\"stylesheet\" href=\"/assets/navbar.css\"></head><body><script>\r\n        const chatMessages = document.getElementById('chat-messages');\r\n        const chatForm = document.getElementById('chat-form');\r\n        const messageInput = document.getElementById('message-input');\r\n\r\n        let websocket;\r\n\r\n        // Funkcja obsługująca połączenie WebSocket\r\n        function setupWebSocket() {\r\n            const userId = 'testuser3';  // Zmień na odpowiednie id_uzytkownika\r\n            const websocketUrl = `ws://localhost:2137/ws/${userId}`;  // Zmień URL na odpowiedni\r\n\r\n            websocket = new WebSocket(websocketUrl);\r\n\r\n            // Obsługa zdarzenia po otwarciu połączenia WebSocket\r\n            websocket.onopen = function () {\r\n                console.log('Połączono z serwerem WebSocket');\r\n            };\r\n\r\n            // Obsługa zdarzenia otrzymania wiadomości\r\n            websocket.onmessage = function (event) {\r\n                console.log('Otrzymano wiadomość:', event.data);\r\n                displayMessage(message.author, message.message);\r\n            };\r\n\r\n            // Obsługa zdarzenia zamknięcia połączenia WebSocket\r\n            websocket.onclose = function () {\r\n                console.log('Połączenie zostało zamknięte');\r\n            };\r\n\r\n            // Obsługa błędów WebSocket\r\n            websocket.onerror = function (error) {\r\n                console.error('Błąd WebSocket:', error);\r\n            };\r\n        }\r\n\r\n        // Funkcja do wysyłania wiadomości przez WebSocket\r\n        function sendMessage(event) {\r\n            event.preventDefault();\r\n\r\n            const messageContent = messageInput.value.trim();\r\n            if (messageContent === '') return;\r\n\r\n            const message = {\r\n                user: 'testuser3',  // Zmień na odpowiednie id_uzytkownika\r\n                event: 'chat',\r\n                data: {\r\n                    room: 'c18abd89-c55d-4642-a1fc-1af701e8411b',\r\n                    content: messageContent\r\n                }\r\n            };\r\n\r\n            console.log('Wysyłanie wiadomości:', JSON.stringify(message))\r\n            websocket.send(JSON.stringify(message));\r\n            messageInput.value = '';\r\n        }\r\n\r\n        // Funkcja do wyświetlania wiadomości na stronie\r\n        function displayMessage(author, message) {\r\n            const messageElement = document.createElement('div');\r\n            messageElement.innerText = `${author}: ${message}`;\r\n            chatMessages.appendChild(messageElement);\r\n        }\r\n\r\n        // Inicjalizacja po załadowaniu strony\r\n        window.onload = function () {\r\n            setupWebSocket();\r\n\r\n            // Obsługa wysyłania formularza\r\n            chatForm.addEventListener('submit', sendMessage);\r\n        };\r\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = components.Navbar().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"container\"><div id=\"chat-messages\"></div><form id=\"chat-form\"><input type=\"text\" id=\"message-input\" placeholder=\"Wpisz wiadomość...\"> <button type=\"submit\">Wyślij</button></form></div></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func HandleChatPage(w http.ResponseWriter, r *http.Request) {
	ChatPage().Render(r.Context(), w)
}
